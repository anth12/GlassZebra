/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.3.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export interface IGameClient {
    create(command: CreateGameCommand): Promise<CreateGameResponse>;
    update(command: UpdateGameCommand): Promise<void>;
    options(): Promise<GetGameOptionsResponse>;
    get(clientId: string): Promise<GameDto>;
    join(joinCode: string | null): Promise<JoinGameResponse>;
    leave(command: PlayerGameCommand): Promise<void>;
}

export class GameClient implements IGameClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    create(command: CreateGameCommand): Promise<CreateGameResponse> {
        let url_ = this.baseUrl + "/api/Game";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<CreateGameResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateGameResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundException.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationException.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateGameResponse>(<any>null);
    }

    update(command: UpdateGameCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Game";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundException.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationException.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    options(): Promise<GetGameOptionsResponse> {
        let url_ = this.baseUrl + "/api/Game/Options";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOptions(_response);
        });
    }

    protected processOptions(response: Response): Promise<GetGameOptionsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetGameOptionsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundException.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationException.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetGameOptionsResponse>(<any>null);
    }

    get(clientId: string): Promise<GameDto> {
        let url_ = this.baseUrl + "/api/Game/{clientId}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<GameDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GameDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundException.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationException.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GameDto>(<any>null);
    }

    join(joinCode: string | null): Promise<JoinGameResponse> {
        let url_ = this.baseUrl + "/api/Game/Join/{joinCode}";
        if (joinCode === undefined || joinCode === null)
            throw new Error("The parameter 'joinCode' must be defined.");
        url_ = url_.replace("{joinCode}", encodeURIComponent("" + joinCode)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processJoin(_response);
        });
    }

    protected processJoin(response: Response): Promise<JoinGameResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JoinGameResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundException.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationException.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<JoinGameResponse>(<any>null);
    }

    leave(command: PlayerGameCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Game/Leave";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLeave(_response);
        });
    }

    protected processLeave(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundException.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationException.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface IPlayerClient {
    remove(command: RemovePlayerCommand): Promise<void>;
}

export class PlayerClient implements IPlayerClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    remove(command: RemovePlayerCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Player";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundException.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ValidationException.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class CreateGameResponse implements ICreateGameResponse {
    gameClientId?: string;
    playerClientId?: string;
    playerId?: number;

    constructor(data?: ICreateGameResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gameClientId = _data["gameClientId"];
            this.playerClientId = _data["playerClientId"];
            this.playerId = _data["playerId"];
        }
    }

    static fromJS(data: any): CreateGameResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateGameResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gameClientId"] = this.gameClientId;
        data["playerClientId"] = this.playerClientId;
        data["playerId"] = this.playerId;
        return data; 
    }
}

export interface ICreateGameResponse {
    gameClientId?: string;
    playerClientId?: string;
    playerId?: number;
}

export class Exception implements IException {
    stackTrace?: string | undefined;
    message?: string;
    innerException?: Exception | undefined;
    source?: string | undefined;

    constructor(data?: IException) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.stackTrace = _data["StackTrace"];
            this.message = _data["Message"];
            this.innerException = _data["InnerException"] ? Exception.fromJS(_data["InnerException"]) : <any>undefined;
            this.source = _data["Source"];
        }
    }

    static fromJS(data: any): Exception {
        data = typeof data === 'object' ? data : {};
        let result = new Exception();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["StackTrace"] = this.stackTrace;
        data["Message"] = this.message;
        data["InnerException"] = this.innerException ? this.innerException.toJSON() : <any>undefined;
        data["Source"] = this.source;
        return data; 
    }
}

export interface IException {
    stackTrace?: string | undefined;
    message?: string;
    innerException?: Exception | undefined;
    source?: string | undefined;
}

export class NotFoundException extends Exception implements INotFoundException {

    constructor(data?: INotFoundException) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): NotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new NotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface INotFoundException extends IException {
}

export class ValidationException extends Exception implements IValidationException {
    errors?: { [key: string]: string[]; } | undefined;

    constructor(data?: IValidationException) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (_data["errors"]) {
                this.errors = {} as any;
                for (let key in _data["errors"]) {
                    if (_data["errors"].hasOwnProperty(key))
                        this.errors![key] = _data["errors"][key] !== undefined ? _data["errors"][key] : [];
                }
            }
        }
    }

    static fromJS(data: any): ValidationException {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.errors) {
            data["errors"] = {};
            for (let key in this.errors) {
                if (this.errors.hasOwnProperty(key))
                    data["errors"][key] = this.errors[key];
            }
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IValidationException extends IException {
    errors?: { [key: string]: string[]; } | undefined;
}

export class CreateGameCommand implements ICreateGameCommand {
    name?: string | undefined;

    constructor(data?: ICreateGameCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateGameCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateGameCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ICreateGameCommand {
    name?: string | undefined;
}

export class GetGameOptionsResponse implements IGetGameOptionsResponse {
    maxQuestionsPerRound?: number;
    maxNumberOfRounds?: number;
    difficulty?: { [key: string]: number; } | undefined;
    categories?: QuestionCategoryDto[] | undefined;

    constructor(data?: IGetGameOptionsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxQuestionsPerRound = _data["maxQuestionsPerRound"];
            this.maxNumberOfRounds = _data["maxNumberOfRounds"];
            if (_data["difficulty"]) {
                this.difficulty = {} as any;
                for (let key in _data["difficulty"]) {
                    if (_data["difficulty"].hasOwnProperty(key))
                        this.difficulty![key] = _data["difficulty"][key];
                }
            }
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(QuestionCategoryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetGameOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetGameOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxQuestionsPerRound"] = this.maxQuestionsPerRound;
        data["maxNumberOfRounds"] = this.maxNumberOfRounds;
        if (this.difficulty) {
            data["difficulty"] = {};
            for (let key in this.difficulty) {
                if (this.difficulty.hasOwnProperty(key))
                    data["difficulty"][key] = this.difficulty[key];
            }
        }
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetGameOptionsResponse {
    maxQuestionsPerRound?: number;
    maxNumberOfRounds?: number;
    difficulty?: { [key: string]: number; } | undefined;
    categories?: QuestionCategoryDto[] | undefined;
}

export class QuestionCategoryDto implements IQuestionCategoryDto {
    id!: number;
    name!: string;

    constructor(data?: IQuestionCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): QuestionCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IQuestionCategoryDto {
    id: number;
    name: string;
}

export class GameDto implements IGameDto {
    id!: number;
    joinCode!: string;
    name!: string;
    status!: GameStatus;
    players!: GamePlayerDto[];
    currentRound?: GameRoundDto | undefined;
    questionsPerRound!: number;
    numberOfRounds!: number;
    difficulty?: Difficulty[] | undefined;
    categories?: QuestionCategoryDto[] | undefined;

    constructor(data?: IGameDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.players = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.joinCode = _data["joinCode"];
            this.name = _data["name"];
            this.status = _data["status"];
            if (Array.isArray(_data["players"])) {
                this.players = [] as any;
                for (let item of _data["players"])
                    this.players!.push(GamePlayerDto.fromJS(item));
            }
            this.currentRound = _data["currentRound"] ? GameRoundDto.fromJS(_data["currentRound"]) : <any>undefined;
            this.questionsPerRound = _data["questionsPerRound"];
            this.numberOfRounds = _data["numberOfRounds"];
            if (Array.isArray(_data["difficulty"])) {
                this.difficulty = [] as any;
                for (let item of _data["difficulty"])
                    this.difficulty!.push(item);
            }
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(QuestionCategoryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GameDto {
        data = typeof data === 'object' ? data : {};
        let result = new GameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["joinCode"] = this.joinCode;
        data["name"] = this.name;
        data["status"] = this.status;
        if (Array.isArray(this.players)) {
            data["players"] = [];
            for (let item of this.players)
                data["players"].push(item.toJSON());
        }
        data["currentRound"] = this.currentRound ? this.currentRound.toJSON() : <any>undefined;
        data["questionsPerRound"] = this.questionsPerRound;
        data["numberOfRounds"] = this.numberOfRounds;
        if (Array.isArray(this.difficulty)) {
            data["difficulty"] = [];
            for (let item of this.difficulty)
                data["difficulty"].push(item);
        }
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGameDto {
    id: number;
    joinCode: string;
    name: string;
    status: GameStatus;
    players: GamePlayerDto[];
    currentRound?: GameRoundDto | undefined;
    questionsPerRound: number;
    numberOfRounds: number;
    difficulty?: Difficulty[] | undefined;
    categories?: QuestionCategoryDto[] | undefined;
}

export enum GameStatus {
    Lobby = 0,
    InProgress = 1,
    Over = 2,
}

export class GamePlayerDto implements IGamePlayerDto {
    id!: number;
    name!: string;
    status!: PlayerStatus;
    isOwner?: boolean;
    image?: string | undefined;
    totalScore?: number;
    roundScore?: number;

    constructor(data?: IGamePlayerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.status = _data["status"];
            this.isOwner = _data["isOwner"];
            this.image = _data["image"];
            this.totalScore = _data["totalScore"];
            this.roundScore = _data["roundScore"];
        }
    }

    static fromJS(data: any): GamePlayerDto {
        data = typeof data === 'object' ? data : {};
        let result = new GamePlayerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["status"] = this.status;
        data["isOwner"] = this.isOwner;
        data["image"] = this.image;
        data["totalScore"] = this.totalScore;
        data["roundScore"] = this.roundScore;
        return data; 
    }
}

export interface IGamePlayerDto {
    id: number;
    name: string;
    status: PlayerStatus;
    isOwner?: boolean;
    image?: string | undefined;
    totalScore?: number;
    roundScore?: number;
}

export enum PlayerStatus {
    Connected = 1,
    Disconnected = 2,
    Left = 4,
}

export class GameRoundDto implements IGameRoundDto {
    id!: number;
    type!: GameType;
    currentQuestion?: QuestionDto | undefined;
    currentQuestionTimeUtc?: Date;
    currentQuestionIndex?: number;

    constructor(data?: IGameRoundDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.currentQuestion = _data["currentQuestion"] ? QuestionDto.fromJS(_data["currentQuestion"]) : <any>undefined;
            this.currentQuestionTimeUtc = _data["currentQuestionTimeUtc"] ? new Date(_data["currentQuestionTimeUtc"].toString()) : <any>undefined;
            this.currentQuestionIndex = _data["currentQuestionIndex"];
        }
    }

    static fromJS(data: any): GameRoundDto {
        data = typeof data === 'object' ? data : {};
        let result = new GameRoundDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["currentQuestion"] = this.currentQuestion ? this.currentQuestion.toJSON() : <any>undefined;
        data["currentQuestionTimeUtc"] = this.currentQuestionTimeUtc ? this.currentQuestionTimeUtc.toISOString() : <any>undefined;
        data["currentQuestionIndex"] = this.currentQuestionIndex;
        return data; 
    }
}

export interface IGameRoundDto {
    id: number;
    type: GameType;
    currentQuestion?: QuestionDto | undefined;
    currentQuestionTimeUtc?: Date;
    currentQuestionIndex?: number;
}

export enum GameType {
    Quiz = 0,
    Doodle = 1,
}

export class QuestionDto implements IQuestionDto {
    id!: number;
    question!: string;
    type!: QuestionType;
    difficulty!: Difficulty;
    categories?: QuestionCategoryDto[] | undefined;
    answers?: string[] | undefined;

    constructor(data?: IQuestionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.question = _data["question"];
            this.type = _data["type"];
            this.difficulty = _data["difficulty"];
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(QuestionCategoryDto.fromJS(item));
            }
            if (Array.isArray(_data["answers"])) {
                this.answers = [] as any;
                for (let item of _data["answers"])
                    this.answers!.push(item);
            }
        }
    }

    static fromJS(data: any): QuestionDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuestionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["question"] = this.question;
        data["type"] = this.type;
        data["difficulty"] = this.difficulty;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item.toJSON());
        }
        if (Array.isArray(this.answers)) {
            data["answers"] = [];
            for (let item of this.answers)
                data["answers"].push(item);
        }
        return data; 
    }
}

export interface IQuestionDto {
    id: number;
    question: string;
    type: QuestionType;
    difficulty: Difficulty;
    categories?: QuestionCategoryDto[] | undefined;
    answers?: string[] | undefined;
}

export enum QuestionType {
    SingleChoiceQuestion = 1,
    MultipleChoiceQuestion = 2,
    FreeTextQuestion = 4,
    SingleChoiceBuzzInQuestion = 8,
    FreeTextDoodle = 16,
    All = 31,
}

export enum Difficulty {
    Easy = 1,
    Average = 2,
    Hard = 4,
    VeryHard = 8,
}

export class JoinGameResponse implements IJoinGameResponse {
    gameClientId?: string;
    playerClientId?: string;
    playerId?: number;

    constructor(data?: IJoinGameResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gameClientId = _data["gameClientId"];
            this.playerClientId = _data["playerClientId"];
            this.playerId = _data["playerId"];
        }
    }

    static fromJS(data: any): JoinGameResponse {
        data = typeof data === 'object' ? data : {};
        let result = new JoinGameResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gameClientId"] = this.gameClientId;
        data["playerClientId"] = this.playerClientId;
        data["playerId"] = this.playerId;
        return data; 
    }
}

export interface IJoinGameResponse {
    gameClientId?: string;
    playerClientId?: string;
    playerId?: number;
}

export class PlayerGameCommand implements IPlayerGameCommand {
    gameClientId?: string;
    playerClientId?: string;

    constructor(data?: IPlayerGameCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gameClientId = _data["gameClientId"];
            this.playerClientId = _data["playerClientId"];
        }
    }

    static fromJS(data: any): PlayerGameCommand {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerGameCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gameClientId"] = this.gameClientId;
        data["playerClientId"] = this.playerClientId;
        return data; 
    }
}

export interface IPlayerGameCommand {
    gameClientId?: string;
    playerClientId?: string;
}

export class UpdateGameCommand extends PlayerGameCommand implements IUpdateGameCommand {
    name?: string | undefined;
    questionsPerRound?: number;
    numberOfRounds?: number;
    difficulty?: Difficulty[] | undefined;
    categories?: number[] | undefined;

    constructor(data?: IUpdateGameCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.questionsPerRound = _data["questionsPerRound"];
            this.numberOfRounds = _data["numberOfRounds"];
            if (Array.isArray(_data["difficulty"])) {
                this.difficulty = [] as any;
                for (let item of _data["difficulty"])
                    this.difficulty!.push(item);
            }
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateGameCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateGameCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["questionsPerRound"] = this.questionsPerRound;
        data["numberOfRounds"] = this.numberOfRounds;
        if (Array.isArray(this.difficulty)) {
            data["difficulty"] = [];
            for (let item of this.difficulty)
                data["difficulty"].push(item);
        }
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item);
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IUpdateGameCommand extends IPlayerGameCommand {
    name?: string | undefined;
    questionsPerRound?: number;
    numberOfRounds?: number;
    difficulty?: Difficulty[] | undefined;
    categories?: number[] | undefined;
}

export class RemovePlayerCommand extends PlayerGameCommand implements IRemovePlayerCommand {
    playerId?: number;

    constructor(data?: IRemovePlayerCommand) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.playerId = _data["playerId"];
        }
    }

    static fromJS(data: any): RemovePlayerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RemovePlayerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["playerId"] = this.playerId;
        super.toJSON(data);
        return data; 
    }
}

export interface IRemovePlayerCommand extends IPlayerGameCommand {
    playerId?: number;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}